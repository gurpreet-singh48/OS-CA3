#include<stdio.h>
#include<stdlib.h>
#include<conio.h>

int main()
{
	int n,i,j,temp;
	int art[100],bst[100],cmt[100],srtart[100],srtbst[100],actcmp[100],arvtime[100],check,turnaround[100],waiting[100],initbst[100];
	while(1)
	{
		printf("Enter the number of processes : ");
		scanf("%d",&n);
		if(n<=0)
		{
			printf("no. of processes should be positive\n");
			continue;
		}
		else
		{
			break;
		}
	}
	   
	check  = n;
	while(i<n)
	{
		printf("PROCESS P%d :- \n",i+1);
		printf("Arrival time : ");
		scanf("%d",&art[i]);
		if(art[i] < 0)
		{
			printf("////////please enter valid arrival time//////////\n");
			continue;
		}
		printf("Burst time : ");
		scanf("%d",&bst[i]);
		if(bst[i] <= 0)
		{
			printf("////////please enter valid burst time///////////\n");
			continue;
		}		
		else
		{
			i = i+1	;	
		}
	}
	for(i=0;i<n;i++)
	{
		srtart[i] = art[i];
	}
	
	for(i =0;i<n-1;i++)
	{
		for(j=0;j<n-i-1;j++)
		{
			if(srtart[j] > srtart[j+1])
			{
				temp = srtart[j];
				srtart[j] = srtart[j+1];
				srtart[j+1] = temp;
 			}
		}
	}
	j=0;
	int k=0;
 	for(i = 0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
				if(srtart[i] == art[j])
				{
					srtbst[i] = bst[j];
				}
		}
	}
	for(i=0;i<n;i++)
	{
		initbst[i] = srtbst[i];
	}
	for(i=0;i<n;i++)
	{
		if(srtbst[i] == 3)
		{
			if(i == 0)
			{
				srtbst[i] = srtbst[i] -3;
				cmt[i] = 3 + srtart[i];
			}
			else
			{
				if(cmt[i-1] >= srtart[i])
				{
					cmt[i] = cmt[i-1]+3;
				}
				else
				{
					cmt[i] = srtart[i] + 3;
				}
				srtbst[i] = 0;
			}
		}
		else if(srtbst[i] > 3)
		{
			if(i == 0)
			{
				srtbst[i] = srtbst[i] -3;
				cmt[i] = 3 + srtart[i];
			}
			else
			{
				if(cmt[i-1] >= srtart[i])
				{
					cmt[i] = cmt[i-1]+3;
				}
				else
				{
					cmt[i] = srtart[i] + 3;
				}
				srtbst[i] = srtbst[i] -3;
			}
		}
		else
		{
			if(i == 0)
			{
				cmt[i] = srtbst[i] + srtart[i];
				srtbst[i] = 0;
			}
			else
			{
				if(cmt[i-1] >= srtart[i])
				{
					cmt[i] = cmt[i-1]+srtbst[i];
				}
				else
				{
					cmt[i] = srtart[i] + srtbst[i];
				}
				srtbst[i] = 0;
			}
			 
		}
	}
	int zerobst=0;
	int maxarv = srtart[n-1];
	i= 0;
	while(i<n)
	{
		if(srtbst[i] == 0)
		{
			actcmp[zerobst] = cmt[i];
			arvtime[zerobst] = srtart[i];
			zerobst = zerobst + 1;
		for(j = i;j<n;j++)
		{
			srtbst[j] = srtbst[j+1];
			cmt[j] = cmt[j+1];
			srtart[j] = srtart[j+1];
		}
		    n=n-1;
		    i=0;
	    }
	    else
	    {
	    	i=i+1;
	    	continue;
		}
	}
	int lastcmt;
	if(arvtime[zerobst-1] == maxarv )
	{
		
		lastcmt = actcmp[zerobst-1];
	}
	else
	{
		lastcmt = cmt[n-1];
	}
	for(i =0;i<n;i++)
	{
		if(srtbst[i] == 6)
		{
			if(i == 0)
			{
				cmt[i] = lastcmt+6;
				srtbst[i] = 0;
			}
			else
			{
				srtbst[i] = srtbst[i] - 6;
				cmt[i] = cmt[i-1] + 6;
			}
		}
		else if(srtbst[i] > 6)
		{
			if(i == 0)
			{
				srtbst[i] = srtbst[i] -6;
				cmt[i] = 6 + lastcmt;
			}
			else
			{
				srtbst[i] = srtbst[i] -6;
				cmt[i] = cmt[i-1]+ 6;
			}
		}
		else
		{
			if(i == 0)
			{
				cmt[i] = srtbst[i] + lastcmt;
				srtbst[i] = 0;
			}
			else
			{
				cmt[i] = cmt[i-1] + srtbst[i];
				srtbst[i] = 0;
			}
			 
		}
	}
	lastcmt = cmt[n-1];
	i=0;
	while(i<n)
	{
		if(srtbst[i] == 0)
		{
			actcmp[zerobst] = cmt[i];
			arvtime[zerobst] = srtart[i];
			zerobst = zerobst + 1;
		for(j = i;j<n;j++)
		{
			srtbst[j] = srtbst[j+1];
			cmt[j] = cmt[j+1];
			srtart[j] = srtart[j+1];
		}
		    n=n-1;
		    i=0;
	    }
	    else
	    {
	    	i=i+1;
	    	continue;
		}
	}
	
	for(i=0;i<n;i++)
	{
		if(i == 0)
		{
			cmt[i] = lastcmt + srtbst[i];
			srtbst[i] = 0;
		}
		
		else
		{
			cmt[i] = cmt[i-1] + srtbst[i];
			srtbst[i] = 0;
		}
 	}
	
	i=0;
	while(i<n)
	{
		if(srtbst[i] == 0)
		{
			actcmp[zerobst] = cmt[i];
			arvtime[zerobst] = srtart[i];
			zerobst = zerobst + 1;
		for(j = i;j<n;j++)
		{
			srtbst[j] = srtbst[j+1];
			cmt[j] = cmt[j+1];
			srtart[j] = srtart[j+1];
		}
		    n=n-1;
		    i=0;
	    }
	    else
	    {
	    	i=i+1;
	    	continue;
		}
	}
	
	
	
	for(i =0;i<zerobst-1;i++)
	{
		for(j=0;j<zerobst-i-1;j++)
		{
			if(arvtime[j] > arvtime[j+1])
			{
				temp = arvtime[j];
				arvtime[j] = arvtime[j+1];
				arvtime[j+1] = temp;
				temp = actcmp[j];
				actcmp[j] = actcmp[j+1];
				actcmp[j+1] = temp;
 			}
		}
	}

	
	for(i = 0;i<zerobst;i++)
	{
		turnaround[i] = actcmp[i] - arvtime[i];
	}
	for(i = 0;i<zerobst;i++)
	{
		waiting[i] = turnaround[i] - initbst[i];
	}
	printf("Process id\t\tArrival Time\t\tBurst Time\t\tCompletion Time\t\tTurnaround Time\t\tWaiting Time\n");
	for(i=0;i<zerobst;i++)
	{
		printf("%d\.\)\t\t\t%d\t\t\t%d\t\t\t%d\t\t\t%d\t\t\t%d\n",i+1,arvtime[i],initbst[i],actcmp[i],turnaround[i],waiting[i]);
	}
	int turnsum = 0,waitingsum = 0;
	for(i=0;i<zerobst;i++)
	{
		turnsum = turnsum + turnaround[i];
		waitingsum = waitingsum + waiting[i];
	}
	int avgturn = turnsum/zerobst;
	int avgwait = waitingsum/zerobst;
	printf("..........................................\n");
	printf("Average Turnaround time is : %d\n",avgturn);
	printf("Average waiting time is : %d",avgwait);
	return(0);
}
